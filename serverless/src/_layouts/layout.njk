<!DOCTYPE html>
<html lang="en">

<head>
   {% for page in pages %}
   {% if page.slug.current == slug %}

   <title>Seo Title</title>
   <meta name="description" content="this is seo description">
   {% if eleventy.serverless.query.slug %}
      <meta http-equiv="Cache-control" content="no-cache">
   {% endif %} 

   {% endif %}
   {% endfor %}

   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   <link href="/assets/css/style.css" rel="stylesheet" type="text/css">
</head>

<body class="bg" topmargin="0">
   <div class="out">
      {% include '_header.njk' %}
      {{ content | safe }}
      {% include '_footer.njk' %}
   </div>

   {% if eleventy.serverless.query.slug %}
    <script>
      function throttle(func, delay) {
         let timeoutId;
         let lastExecTime = 0;

         return function (...args) {
            const currentTime = Date.now();
            const timeSinceLastExec = currentTime - lastExecTime;

            if (!timeoutId && timeSinceLastExec >= delay) {
               func.apply(this, args);
               lastExecTime = currentTime;
            } else if (!timeoutId) {
               timeoutId = setTimeout(() => {
               func.apply(this, args);
               lastExecTime = Date.now();
               timeoutId = null;
               }, delay - timeSinceLastExec);
            }
         };
      }

    (function(){
         const rawQuery = `*[_type == "pages" && slug.current == "{{ eleventy.serverless.query.slug }}" && _id in path("drafts.**")][0]`;
         const rawQuery2 = `*[_type == "pages" && !(_id in path("drafts.**"))][0]`;
         const searchParams = new URLSearchParams({query: rawQuery}).toString();
         const searchParams2 = new URLSearchParams({query: rawQuery2}).toString();

         const myFunction = () => {
            setTimeout(function(){ location.reload(true); }, 0);
         }

         const listener = throttle(myFunction, 1500);
         var source = new EventSource(`https://nzudkmke.api.sanity.io/v2021-06-07/data/listen/production?${searchParams}`, {withCredentials: true});
         source.addEventListener("mutation", listener)

         const myFunction2 = () => {
            setTimeout(function(){ location.reload(true); }, 0);
         }

         const listener2 = throttle(myFunction2, 1500);
         var source2 = new EventSource(`https://nzudkmke.api.sanity.io/v2021-06-07/data/listen/production?${searchParams2}`, {withCredentials: true});
         source2.addEventListener("mutation", listener2)

    })()
    </script>
   {% endif %}
</body>

</html>
